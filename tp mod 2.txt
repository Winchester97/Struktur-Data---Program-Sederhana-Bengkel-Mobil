--HEADER--

#ifndef HEAD_H_INCLUDED
#define HEAD_H_INCLUDED

#include <cstddef>
#define first(L) L.first
#define last(L) L.last
#define info(L) L->info
#define next(L) L->next
#define NIL NULL

typedef int infotype;
typedef struct elmlist *address;
struct elmlist {
    infotype info;
    address next;
};

struct List{
    address first;
    address last;
};

address Allocation (infotype X);
void Deallocation(address &P);
void createList(List &L);
void insertFirst(List &L, address P);
void insertLast (List &L, address P);
void printInfo (List L);
void deleteFirst(List &L, address &P);
void deleteLast(List &L, address &P);
int selisih(List &L, infotype X);

#endif // HEAD_H_INCLUDED
_________________________________________________________________

sourcefile.cpp
#include <iostream>
#include "head.h"

using namespace std;

address Allocation(infotype X) {
    address P = new elmlist;
    info(P) = X;
    next(P) = NULL;
    return P;
}

void Deallocation(address &P){
    delete P;
}

void createList(List &L) {
    first(L) = NULL;
    last(L) = NULL;
}

void insertFirst(List &L, address P) {

    if (first(L) == NULL) {
        first(L) = P;
        last(L) = P;
        }
    else {
        next(P) = first(L);
        first(L) = P;
    }
}

void insertLast (List &L, address P) {
    if (first(L) == NULL) {
        first(L) = P;
        last(L) = P;
        }
    else {
        next(last(L)) = P;
        last(L) = P;
        }
}

void printInfo(List L) {
    address P = first(L);
    cout<<info(P)<<" ";
    while (next(P) != NULL) {
        P = next(P);
        cout<<info(P)<<" ";
        }
}

void deleteFirst(List &L, address &P) {
    if (first(L) == NULL)
        cout<<"Tidak ada data"<<endl;
    else {
    P = first(L);
    first(L) = next(P);
    next(P) = NULL;
    }
}

void deleteLast(List &L, address &P){
    if (first(L) == NULL)
        cout<<"Tidak ada data"<<endl;
    else {
    address Q = first(L);
    P = next(Q);
    while (next(P) != NULL) {
        Q = next(Q);
        P = next(P);
    } next(Q) = NULL;
    last(L) = P;
    }
}

int selisih(List &L, infotype X){
    address P = first(L);
    address Q = last(L);
    int slsh = info(P) - info(Q);
    return slsh;
}
________________________________________

---main.cpp---
#include <iostream>
#include "head.h"

using namespace std;

int main() {
    int pil;
    infotype data;
    address P;
    List L;
    createList(L);
    cout<<"-------------Single Linked List------------------"<<endl;
    while (pil != 0) {
    cout<<""<<endl;
    cout<<"1. Insert First"<<endl;
    cout<<"2. Insert Last"<<endl;
    cout<<"3. Delete First"<<endl;
    cout<<"4. Delete Last"<<endl;
    cout<<"5. Show All"<<endl;
    cout<<"Masukkan Pilihan anda : ";
    cin>>pil;
    cout<<endl;
        switch(pil) {
        case 1:
            cout<<"Masukkan Nilai : ";
            cin >> data;
            P = Allocation(data);
            insertFirst(L,P);
            break;
        case 2:
            cout<<"Masukkan Nilai: ";
            cin >> data;
            P = Allocation(data);
            insertLast (L,P);
            break;
        case 3:
            P = Allocation(data);
            deleteFirst(L,P);
            break;
        case 4:
            P = Allocation(data);
            deleteLast(L,P);
            break;
        case 5:
            cout<<"Rekap Data"<<info(P)<<endl;
            printInfo(L);
        }
    }
return 0;
}
